

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//
// Simple implementation of IoTHub LWM2M Firmware Update object
//

//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

#ifndef _FIRMWAREUPDATE_OBJECT_H_
#define _FIRMWAREUPDATE_OBJECT_H_

#include "iothub_client.h"

#ifdef __cplusplus
extern "C"
{
#endif

// LWM2M Object IDs and Property IDs for firmwareupdate object
#define OID_FIRMWAREUPDATE 5
#define PID_FIRMWAREUPDATE_PACKAGE 0
#define PID_FIRMWAREUPDATE_PACKAGEURI 1
#define PID_FIRMWAREUPDATE_UPDATE 2
#define PID_FIRMWAREUPDATE_STATE 3
#define PID_FIRMWAREUPDATE_UPDATERESULT 5
#define PID_FIRMWAREUPDATE_PKGNAME 6
#define PID_FIRMWAREUPDATE_PKGVERSION 7

#define FIRMWAREUPDATE_PROPERTY_COUNT 7

typedef struct TAG_object_firmwareupdate object_firmwareupdate;
typedef IOTHUB_CLIENT_RESULT(*FIRMWAREUPDATE_RESOURCE_CALLBACK)(object_firmwareupdate *obj);

// Object definition for firmwareupdate object
typedef struct TAG_object_firmwareupdate {
    uint16_t instanceId;    // Must be first member of structure
    IOTHUB_CHANNEL_HANDLE channelHandle;
    char resourceUpdated[FIRMWAREUPDATE_PROPERTY_COUNT];
    void* propval_firmwareupdate_package;        // /5/x/0
    char* propval_firmwareupdate_packageuri;        // /5/x/1
    int64_t propval_firmwareupdate_state;        // /5/x/3
    int64_t propval_firmwareupdate_updateresult;        // /5/x/5
    char* propval_firmwareupdate_pkgname;        // /5/x/6
    char* propval_firmwareupdate_pkgversion;        // /5/x/7
    FIRMWAREUPDATE_RESOURCE_CALLBACK firmwareupdate_package_write_callback;
    FIRMWAREUPDATE_RESOURCE_CALLBACK firmwareupdate_packageuri_write_callback;
    FIRMWAREUPDATE_RESOURCE_CALLBACK firmwareupdate_update_execute_callback;
    FIRMWAREUPDATE_RESOURCE_CALLBACK firmwareupdate_state_read_callback;
    FIRMWAREUPDATE_RESOURCE_CALLBACK firmwareupdate_updateresult_read_callback;
    FIRMWAREUPDATE_RESOURCE_CALLBACK firmwareupdate_pkgname_read_callback;
    FIRMWAREUPDATE_RESOURCE_CALLBACK firmwareupdate_pkgversion_read_callback;
} object_firmwareupdate;

IOTHUB_CLIENT_RESULT create_firmwareupdate_object(IOTHUB_CLIENT_HANDLE h, uint16_t *instanceId);
object_firmwareupdate *get_firmwareupdate_object(uint16_t instanceId);

// Property setters for firmwareupdate object
IOTHUB_CLIENT_RESULT set_firmwareupdate_state(uint16_t instanceId, int64_t value);
IOTHUB_CLIENT_RESULT set_firmwareupdate_updateresult(uint16_t instanceId, int64_t value);
IOTHUB_CLIENT_RESULT set_firmwareupdate_pkgname(uint16_t instanceId, const char *value);
IOTHUB_CLIENT_RESULT set_firmwareupdate_pkgversion(uint16_t instanceId, const char *value);

#ifdef __cplusplus
}
#endif

#endif // _FIRMWAREUPDATE_OBJECT_H_

