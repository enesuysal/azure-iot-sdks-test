<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<# 
var allProps = Program.GetListOfPropertiesToGenerate(ObjectName); 
#>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//
// Simple implementation of IoTHub LWM2M <#= ObjectName #> object
//

//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

#include "iotdm_internal.h"
#include "iotdm_dispatchers.h"
#include "<#= ObjectCodeName.ToLower() #>_object.h"


/**********************************************************************************
 * <#= ObjectName #> default property values
 *
 **********************************************************************************/

void set_default_<#= ObjectCodeName #>_property_values(<#= ObjectStructName #> *obj)
{
<#
    foreach (var prop in allProps)
    {
        if (prop.CanRead)
        {
#>
    set_<#= prop.PropertyName.ToLower() #>(obj->instanceId, <#= GetDefaultValue(prop, false) #>);
<#
        }
        else if (prop.CanWrite)
        {
#>
    obj-><#= prop.SampleVariableName #> = <#= GetDefaultValue(prop, true) #>;
<#
        }
    }
#>
}

/**********************************************************************************
 * CALLBACK HANDLERS
 *
 **********************************************************************************/
<#
    foreach (var prop in allProps)
    {
        if (prop.CanRead)
        { 
#>
<#= GetReadPrototype(prop) #>
{
    IOTHUB_CLIENT_RESULT result = IOTHUB_CLIENT_OK;
    if (obj-><#= prop.PropertyName.ToLower() #>_read_callback != NULL)
    {
        result = obj-><#= prop.PropertyName.ToLower() #>_read_callback(obj);
    }
    if (result == IOTHUB_CLIENT_OK)
    {
<#
            switch (prop.ResourceFromXml.Type)
            {
                case LWM2MObjectItemType.String:
#>
        *value = lwm2m_strdup(obj-><#= prop.SampleVariableName #>);
        LogInfo("returning [%s] for <#= prop.PropertyName #>", *value);
<#
                    break;
                case LWM2MObjectItemType.Float:
#>
        *value = obj-><#= prop.SampleVariableName #>;
        LogInfo("returning %f for <#= prop.PropertyName #>", *value);
<#
                    break;
                case LWM2MObjectItemType.Integer:
                case LWM2MObjectItemType.Time:
#>
        *value = obj-><#= prop.SampleVariableName #>;
        LogInfo("returning %lld for <#= prop.PropertyName #>", *value);
<#
                    break;
                }
#>
    }
    return result;
}

<#
            }
            if (prop.CanWrite)
            { 
#>
<#= GetWritePrototype(prop) #>
{
<#
                switch (prop.ResourceFromXml.Type)
                {
                    case LWM2MObjectItemType.Opaque:
#>

    return IOTHUB_CLIENT_NOT_IMPLEMENTED;
<#
                        break;
                    case LWM2MObjectItemType.String:
#>
    IOTHUB_CLIENT_RESULT result = IOTHUB_CLIENT_OK;
    lwm2m_free(obj-><#= prop.SampleVariableName #>);
    obj-><#= prop.SampleVariableName #> = iotdm_strndup(value, length);
    LogInfo("<#= prop.PropertyName #> being set to [%s]", obj-><#= prop.SampleVariableName #>);

    if (obj-><#= prop.PropertyName.ToLower() #>_write_callback != NULL)
    {
        result = obj-><#= prop.PropertyName.ToLower() #>_write_callback(obj);
    }
    return result;
<#
                    break;
                case LWM2MObjectItemType.Float:
#>
    IOTHUB_CLIENT_RESULT result = IOTHUB_CLIENT_OK;
    LogInfo("<#= prop.PropertyName #> being set to %f", value);
    (obj-><#= prop.SampleVariableName #> = value;

    if (obj-><#= prop.PropertyName.ToLower() #>_write_callback != NULL)
    {
        result = obj-><#= prop.PropertyName.ToLower() #>_write_callback(obj);
    }
    return result;
<#
                    break;
                case LWM2MObjectItemType.Integer:
                case LWM2MObjectItemType.Time:
#>
    IOTHUB_CLIENT_RESULT result = IOTHUB_CLIENT_OK;
    LogInfo("<#= prop.PropertyName #> being set to %lld", value);
    obj-><#= prop.SampleVariableName #> = value;

    if (obj-><#= prop.PropertyName.ToLower() #>_write_callback != NULL)
    {
        result = obj-><#= prop.PropertyName.ToLower() #>_write_callback(obj);
    }
    return result;
<#
                    break;
            }
#>
}

<#
        }
        if (prop.CanExecute)
        { 
#>
<#= GetExecutePrototype(prop) #>
{
    IOTHUB_CLIENT_RESULT result = IOTHUB_CLIENT_NOT_IMPLEMENTED;
    LogInfo("inside execute handler for <#= prop.PropertyName #>");
    if (obj-><#= prop.PropertyName.ToLower() #>_execute_callback != NULL)
    {
        result = obj-><#= prop.PropertyName.ToLower() #>_execute_callback(obj);
    }
    return result;
}

<#
        }
    }
#>

<#+ 

public string ObjectName;

public uint ObjectId;

public int PropertyCount;

public string ObjectCodeName
{
    get
    {
        return ObjectName.Replace(" ","").ToLower();
    }
}

public string ObjectStructName
{
    get
    {
        return "object_" + ObjectCodeName;
    }
}

private string GetReadPrototype(PropertyToGenerate prop)
{
    if (prop.Type == LWM2MObjectItemType.Opaque)
    {
        return "IOTHUB_CLIENT_RESULT on_read_" + prop.PropertyName.ToLower() + "(" + ObjectStructName + " *obj, void **value, size_t *length)";
    }
    else if (prop.Type == LWM2MObjectItemType.String)
    {
        return "IOTHUB_CLIENT_RESULT on_read_" + prop.PropertyName.ToLower() + "(" + ObjectStructName + " *obj, char **value)";
    }
    else
    {
        return "IOTHUB_CLIENT_RESULT on_read_" + prop.PropertyName.ToLower() + "(" + ObjectStructName + " *obj, " + prop.PropertyTypeCodeName + " *value)";
    }
}

private string GetWritePrototype(PropertyToGenerate prop)
{
    if (prop.Type == LWM2MObjectItemType.Opaque)
    {
        return "IOTHUB_CLIENT_RESULT on_write_" + prop.PropertyName.ToLower() + "(" + ObjectStructName + " *obj, " + prop.PropertyTypeCodeName + " value, size_t length)";
    }
    else if (prop.Type == LWM2MObjectItemType.String)
    {
        return "IOTHUB_CLIENT_RESULT on_write_" + prop.PropertyName.ToLower() + "(" + ObjectStructName + " *obj, const char *value, size_t length)";
    }
    else
    {
        return "IOTHUB_CLIENT_RESULT on_write_" + prop.PropertyName.ToLower() + "(" + ObjectStructName + " *obj, " + prop.PropertyTypeCodeName + " value)";
    }
}

private string GetSetterPrototype(PropertyToGenerate prop)
{
    if (prop.Type == LWM2MObjectItemType.Opaque)
    {
        return "IOTHUB_CLIENT_RESULT set_" + prop.PropertyName.ToLower() + "(uint16_t instanceId, " + prop.PropertyTypeCodeName + " value, size_t length)";
    }
    else if (prop.Type == LWM2MObjectItemType.String)
    {
        return "IOTHUB_CLIENT_RESULT set_" + prop.PropertyName.ToLower() + "(uint16_t instanceId, const char *value)";
    }
    else
    {
        return "IOTHUB_CLIENT_RESULT set_" + prop.PropertyName.ToLower() + "(uint16_t instanceId, " + prop.PropertyTypeCodeName + " value)";
    }
}


private string GetExecutePrototype(PropertyToGenerate prop)
{
    return "IOTHUB_CLIENT_RESULT on_exec_" + prop.PropertyName.ToLower() + "("  + ObjectStructName + " *obj)";
}

private string GetDefaultValue(PropertyToGenerate prop, bool addStrdup)
{
    switch (prop.Type)
    {
        case LWM2MObjectItemType.String:
            if (addStrdup)
            {
                return "lwm2m_strdup(\"\")";
            }
            else
            {
                return "\"" + prop.PropertyName + "\"";
            }
        case LWM2MObjectItemType.Boolean:
            return "false";
        case LWM2MObjectItemType.Float:
            return "-1.0";
        case LWM2MObjectItemType.Integer:
        case LWM2MObjectItemType.Time:
            return "-1";
        default:
            return "NULL";
    }
}

#>
