<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<# 
var allProps = Program.GetListOfPropertiesToGenerate(ObjectName); 
#>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//
// Simple implementation of IoTHub LWM2M <#= ObjectName #> object
//

//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

#include "iotdm_internal.h"
#include "iotdm_dispatchers.h"
#include "<#= ObjectCodeName.ToLower() #>_object.h"

DISPATCHER_FORWARD_DECLARATIONS(<#= ObjectStructName #>);

// Property Indices for for <#= ObjectCodeName #> object
<#
foreach (var prop in allProps)
{
#>
#define INDEX_<#= prop.PropertyName.ToUpper() #> <#= prop.PropertyIndex #>
<#
}
#>

void set_default_<#= ObjectCodeName #>_property_values(<#= ObjectStructName #> *obj);
<#
foreach (var prop in allProps)
{
    if (prop.CanRead)
    { 
#>
<#= GetReadPrototype(prop) #>;
<#
    }
    if (prop.CanWrite)
    {
#>
<#= GetWritePrototype(prop) #>;
<#
    }
    if (prop.CanExecute)
    {
#>
<#= GetExecutePrototype(prop) #>;
<#
    }
}
#>


/**********************************************************************************
 * <#= ObjectName #> setters
 *
 **********************************************************************************/
<#
    foreach (var prop in allProps)
    {
        if (prop.CanRead)
        { 
#>
<#= GetSetterPrototype(prop) #>
{
    IOTHUB_CLIENT_RESULT result = IOTHUB_CLIENT_ERROR;
    <#= ObjectStructName #> *obj = get_object_instance(OID_<#= ObjectCodeName.ToUpper() #>, instanceId);
    if (obj != NULL)
    {
<#
            switch (prop.ResourceFromXml.Type)
            {
                case LWM2MObjectItemType.Opaque:
#>
        // BKTODO
        result = IOTHUB_CLIENT_NOT_IMPLEMENTED;
<#
                    break;
                case LWM2MObjectItemType.String:
#>
        if ((obj-><#= prop.SampleVariableName #> == NULL) || strcmp(obj-><#= prop.SampleVariableName #>, value))
        {
            LogInfo("<#= prop.PropertyName #> being set to [%s]", value);
            lwm2m_free(obj-><#= prop.SampleVariableName #>);
            obj-><#= prop.SampleVariableName #> = lwm2m_strdup(value);

            obj->resourceUpdated[INDEX_<#= prop.PropertyName.ToUpper() #>] = (char)true;
        }

        result = IOTHUB_CLIENT_OK;
<#
                    break;
                case LWM2MObjectItemType.Float:
#>
        if (obj-><#= prop.SampleVariableName #> != value)
        {
            LogInfo("<#= prop.PropertyName #> being set to %f", value);
            (obj-><#= prop.SampleVariableName #> = value;

            obj->resourceUpdated[INDEX_<#= prop.PropertyName.ToUpper() #>] = (char)true;
        }

        result = IOTHUB_CLIENT_OK;
<#
                    break;
                case LWM2MObjectItemType.Integer:
                case LWM2MObjectItemType.Time:
#>
        if (obj-><#= prop.SampleVariableName #> != value)
        {
            LogInfo("<#= prop.PropertyName #> being set to %lld", value);
            obj-><#= prop.SampleVariableName #> = value;

            obj->resourceUpdated[INDEX_<#= prop.PropertyName.ToUpper() #>] = (char)true;
        }

        result = IOTHUB_CLIENT_OK;
<#
                    break;
            }
#>
    }

    return result;
}

<#
        }
    }
#>

/**********************************************************************************
 * <#= ObjectName #> creation and destruction
 *
 **********************************************************************************/
static void destroy_<#= ObjectCodeName #>_object(<#= ObjectStructName #> *obj)
{
    if (obj != NULL)
    {
<#
    foreach (var prop in allProps)
    {
        if (prop.ResourceFromXml.Type == LWM2MObjectItemType.String)
        {
#>
        lwm2m_free(obj-><#= prop.SampleVariableName #>);
<#
        }
    }
#>
        lwm2m_free(obj);
    }
}

static uint16_t g_next_<#= ObjectCodeName #>_instance_id = 0;
static uint16_t get_next_<#= ObjectCodeName #>_instance_id()
{
    return g_next_<#= ObjectCodeName #>_instance_id++;
}

IOTHUB_CLIENT_RESULT create_<#= ObjectCodeName #>_object(IOTHUB_CLIENT_HANDLE h, uint16_t *instanceId)
{
    IOTHUB_CLIENT_RESULT res = IOTHUB_CLIENT_OK;

    res = REGISTER_DISPATCHERS(OID_<#= ObjectCodeName.ToUpper() #>, <#= ObjectStructName #>);
    if (res != IOTHUB_CLIENT_OK)
    {
        LogError("Failed registering dispatchers");
        res = IOTHUB_CLIENT_ERROR;
    }

    else
    {
        <#= ObjectStructName #> *obj = (<#= ObjectStructName #> *)lwm2m_malloc(sizeof(<#= ObjectStructName #>));
        if (obj == NULL)
        {
            LogError("malloc failure");
            res = IOTHUB_CLIENT_ERROR;
        }

        else
        {
            memset(obj,0,sizeof(*obj));
            obj->instanceId = get_next_<#= ObjectCodeName #>_instance_id();
            obj->channelHandle = h;
                
            res = add_dm_object(&<#= ObjectStructName #>_instance_list, obj);
            if (res != IOTHUB_CLIENT_OK)
            {
                LogError("adding <#= ObjectName #> object to object list");

                destroy_<#= ObjectCodeName #>_object(obj);
                obj = NULL;
            }

            else
            {
                set_default_<#= ObjectCodeName #>_property_values(obj);
            }
        }

        if (instanceId != NULL)
        {
            *instanceId = (obj == NULL) ? 0 : obj->instanceId;
        }
    }

    return res;
}

<#= ObjectStructName #> *get_<#= ObjectCodeName #>_object(uint16_t instanceId)
{
    <#= ObjectStructName #> *obj = NULL;

    (void)get_dm_object(<#= ObjectStructName #>_instance_list, instanceId, (void*)&obj);

    return obj;
}

#define DO_SIGNAL_RESOURCE_CHANGE(index, property) \
    if (obj->resourceUpdated[index]) \
    { \
        on_resource_value_changed(obj->channelHandle, OID_<#= ObjectCodeName.ToUpper() #>, obj->instanceId, property); \
        obj->resourceUpdated[index] = (char)false; \
    }

   
void signal_object_<#= ObjectCodeName #>_resource_changed(void *p)
{
    <#= ObjectStructName#> *obj = (<#= ObjectStructName#>*)p;
<#
    foreach (var prop in allProps)
    {
#>
    DO_SIGNAL_RESOURCE_CHANGE(INDEX_<#= prop.PropertyName.ToUpper() #>, PID_<#= prop.PropertyName.ToUpper() #>)
<#
    }
#>
}

BEGIN_READ_DISPATCHER(<#= ObjectStructName#>)
<#
foreach (var prop in allProps)
{
    if (prop.CanRead)
    { 
#>
    <#= prop.PropertyTypeName.ToUpper() #>_READ(PID_<#= prop.PropertyName.ToUpper() #>, on_read_<#= prop.PropertyName.ToLower() #>)
<#
    }
}
#>
END_READ_DISPATCHER()

BEGIN_EXEC_DISPATCHER(<#= ObjectStructName#>)
<#
foreach (var prop in allProps)
{
    if (prop.CanExecute)
    { 
#>
    EXEC(PID_<#= prop.PropertyName.ToUpper() #>, on_exec_<#= prop.PropertyName.ToLower() #>)
<#
    }
}
#>
END_EXEC_DISPATCHER()

BEGIN_WRITE_DISPATCHER(<#= ObjectStructName#>)
<#
foreach (var prop in allProps)
{
    if (prop.CanWrite)
    { 
#>
    <#= prop.PropertyTypeName.ToUpper() #>_WRITE(PID_<#= prop.PropertyName.ToUpper() #>, on_write_<#= prop.PropertyName.ToLower() #>)
<#
    }
}
#>
END_WRITE_DISPATCHER();

BEGIN_OPERATION_LIST(<#= ObjectStructName#>)
<#
foreach (var prop in allProps)
{
#>
    OPERATION(PID_<#= prop.PropertyName.ToUpper() #>, OP_<#= prop.ResourceFromXml.Operations.ToString() #>, <#= prop.LWM2MTypeText #>)
<#
}
#>
END_OPERATION_LIST()


<#+ 

public string ObjectName;

public uint ObjectId;

public int PropertyCount;

public string ObjectCodeName
{
    get
    {
        return ObjectName.Replace(" ","").ToLower();
    }
}

public string ObjectStructName
{
    get
    {
        return "object_" + ObjectCodeName;
    }
}

private string GetReadPrototype(PropertyToGenerate prop)
{
    if (prop.Type == LWM2MObjectItemType.Opaque)
    {
        return "IOTHUB_CLIENT_RESULT on_read_" + prop.PropertyName.ToLower() + "(" + ObjectStructName + " *obj, void **value, size_t *length)";
    }
    else if (prop.Type == LWM2MObjectItemType.String)
    {
        return "IOTHUB_CLIENT_RESULT on_read_" + prop.PropertyName.ToLower() + "(" + ObjectStructName + " *obj, char **value)";
    }
    else
    {
        return "IOTHUB_CLIENT_RESULT on_read_" + prop.PropertyName.ToLower() + "(" + ObjectStructName + " *obj, " + prop.PropertyTypeCodeName + " *value)";
    }
}

private string GetWritePrototype(PropertyToGenerate prop)
{
    if (prop.Type == LWM2MObjectItemType.Opaque)
    {
        return "IOTHUB_CLIENT_RESULT on_write_" + prop.PropertyName.ToLower() + "(" + ObjectStructName + " *obj, " + prop.PropertyTypeCodeName + " value, size_t length)";
    }

    else if (prop.Type == LWM2MObjectItemType.String)
    {
        return "IOTHUB_CLIENT_RESULT on_write_" + prop.PropertyName.ToLower() + "(" + ObjectStructName + " *obj, const char *value, size_t length)";
    }

    else
    {
        return "IOTHUB_CLIENT_RESULT on_write_" + prop.PropertyName.ToLower() + "(" + ObjectStructName + " *obj, " + prop.PropertyTypeCodeName + " value)";
    }
}

private string GetSetterPrototype(PropertyToGenerate prop)
{
    if (prop.Type == LWM2MObjectItemType.Opaque)
    {
        return "IOTHUB_CLIENT_RESULT set_" + prop.PropertyName.ToLower() + "(uint16_t instanceId, " + prop.PropertyTypeCodeName + " value, size_t length)";
    }

    else if (prop.Type == LWM2MObjectItemType.String)
    {
        return "IOTHUB_CLIENT_RESULT set_" + prop.PropertyName.ToLower() + "(uint16_t instanceId, const char *value)";
    }

    else
    {
        return "IOTHUB_CLIENT_RESULT set_" + prop.PropertyName.ToLower() + "(uint16_t instanceId, " + prop.PropertyTypeCodeName + " value)";
    }
}


private string GetExecutePrototype(PropertyToGenerate prop)
{
    return "IOTHUB_CLIENT_RESULT on_exec_" + prop.PropertyName.ToLower() + "("  + ObjectStructName + " *obj)";
}

#>
