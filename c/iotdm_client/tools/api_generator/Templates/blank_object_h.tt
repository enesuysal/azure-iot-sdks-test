<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<# 
var allProps = Program.GetListOfPropertiesToGenerate(ObjectName); 
#>

// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//
<# 
#>
// Simple implementation of IoTHub LWM2M <#= ObjectName #> object
//

//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

#ifndef _<#= ObjectCodeName.ToUpper() #>_OBJECT_H_
#define _<#= ObjectCodeName.ToUpper() #>_OBJECT_H_

#include "iothub_client.h"

#ifdef __cplusplus
extern "C"
{
#endif

// LWM2M Object IDs and Property IDs for <#= ObjectCodeName #> object
#define OID_<#= ObjectCodeName.ToUpper() #> <#= ObjectId #>
<#
foreach (var prop in allProps)
{
#>
#define PID_<#= prop.PropertyName.ToUpper() #> <#= prop.PropertyId #>
<#
}
#>

#define <#= ObjectCodeName.ToUpper() #>_PROPERTY_COUNT <#= PropertyCount #>

typedef struct TAG_<#= ObjectStructName #> <#= ObjectStructName #>;
typedef IOTHUB_CLIENT_RESULT(*<#= ObjectCodeName.ToUpper() #>_RESOURCE_CALLBACK)(<#= ObjectStructName #> *obj);

// Object definition for <#= ObjectCodeName #> object
typedef struct TAG_<#= ObjectStructName #> {
    uint16_t instanceId;    // Must be first member of structure
    IOTHUB_CHANNEL_HANDLE channelHandle;
    char resourceUpdated[<#= ObjectCodeName.ToUpper() #>_PROPERTY_COUNT];
<#
    foreach (var prop in allProps)
    {
        if (prop.CanWrite || prop.CanRead)
        { 
#>
    <#= prop.PropertyTypeCodeName #> <#= prop.SampleVariableName #>;        // /<#= ObjectId #>/x/<#= prop.PropertyId #>
<#
        }
    }
    foreach(var prop in allProps)
    {
        if (prop.CanRead)
        {
#>
    <#= ObjectCodeName.ToUpper() #>_RESOURCE_CALLBACK <#= prop.PropertyName.ToLower() #>_read_callback;
<#
        }
        if (prop.CanWrite)
        {
#>
    <#= ObjectCodeName.ToUpper() #>_RESOURCE_CALLBACK <#= prop.PropertyName.ToLower() #>_write_callback;
<#
        }
        if (prop.CanExecute)
        {
#>
    <#= ObjectCodeName.ToUpper() #>_RESOURCE_CALLBACK <#= prop.PropertyName.ToLower() #>_execute_callback;
<#
        }
    }
#>
} <#= ObjectStructName #>;

IOTHUB_CLIENT_RESULT create_<#= ObjectCodeName #>_object(IOTHUB_CLIENT_HANDLE h, uint16_t *instanceId);
<#= ObjectStructName #> *get_<#= ObjectCodeName #>_object(uint16_t instanceId);

// Property setters for <#= ObjectCodeName #> object
<#
foreach (var prop in allProps)
{
    if (prop.CanRead)
    { 
#>
<#= GetSetterPrototype(prop) #>;
<#
    }
}
#>

#ifdef __cplusplus
}
#endif

#endif // _<#= ObjectCodeName.ToUpper() #>_OBJECT_H_

<#+ 

public string ObjectName;

public uint ObjectId;

public int PropertyCount;

public string ObjectCodeName
{
    get
    {
        return ObjectName.Replace(" ","").ToLower();
    }
}

public string ObjectStructName
{
    get
    {
        return "object_" + ObjectCodeName;
    }
}

private string GetSetterPrototype(PropertyToGenerate prop)
{
    if (prop.Type == LWM2MObjectItemType.Opaque)
    {
        return "IOTHUB_CLIENT_RESULT set_" + prop.PropertyName.ToLower() + "(uint16_t instanceId, " + prop.PropertyTypeCodeName + " value, size_t length)";
    }
    else if (prop.Type == LWM2MObjectItemType.String)
    {
        return "IOTHUB_CLIENT_RESULT set_" + prop.PropertyName.ToLower() + "(uint16_t instanceId, const char *value)";
    }
    else
    {
        return "IOTHUB_CLIENT_RESULT set_" + prop.PropertyName.ToLower() + "(uint16_t instanceId, " + prop.PropertyTypeCodeName + " value)";
    }
}


#>
